// Jenkins running on a windows host currently is unable to execute commands inside linux containers.
// This file uses direct docker commands to make use of the containers.
// The side-effect of this is a growing number of dangling images.
// During a period of development, these containers may speed up containers builds so tidy up of them will be left as a manual task for now.
pipeline {
    agent none
    stages {
        stage('lint') {
            agent any;
            steps {
                bat """
                    mkdir reports
                    docker build -t pemjh:lint --target lint .
                    docker run --rm -t -v ${env.WORKSPACE}:/usr/src/app pemjh:lint
                """
                
                recordIssues(
                    tool: pyLint(),
                    // 50 pylint warnings or more sets the build to unstable
                    qualityGates: [[threshold: 50, type: 'TOTAL', unstable: true]]
                )
            }
        }
        stage('flake8') {
            agent any;
            steps {
                bat """
                    docker build -t pemjh:flake8 --target flake8 .
                    docker run --rm -t -v ${env.WORKSPACE}:/usr/src/app pemjh:flake8
                """
                
                recordIssues(
                    tool: flake8(),
                    // 50 pylint warnings or more sets the build to unstable
                    qualityGates: [[threshold: 50, type: 'TOTAL', unstable: true]]
                )
            }
        }
        stage('test') {
            agent any;
            steps {
                bat """
                    docker build -t pemjh:test --target test .
                    docker run --rm -t -v ${env.WORKSPACE}:/usr/src/app pemjh:test
                """
                xunit (
                    tools: JUnit(pattern: 'reports/pytest.xml'),
                    thresholds: [
                        failed(unstableThreshold: '10')
                    ]
                )
            }
        }
        stage('coverage') {
            agent any;
            steps {
                publishCoverage adapters: [cobertura('coverage.xml')], globalThresholds: [[thresholdTarget: 'Function', unhealthyThreshold: 50.0, unstableThreshold: 80.0]]
            }
        }
    }
}